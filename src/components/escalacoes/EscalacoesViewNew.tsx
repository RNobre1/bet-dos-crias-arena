import React, { useState } from 'react';
import { useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { Button } from "@/components/ui/button";
import { Info, Settings, Calendar } from "lucide-react";
import { Tables } from "@/integrations/supabase/types";
import { generateBalancedTeamsV3, preparePlayersV3, LineupResult, TeamPlayerV3 } from "@/utils/teamFormationV3";
import { supabase } from "@/integrations/supabase/client";
import CampoFutebolV3 from "./CampoFutebolV3";
import CustomLineupGenerator from "./CustomLineupGenerator";
import { useIsMobile } from "@/hooks/use-mobile";

interface EscalacoesViewNewProps {
  jogadores: Tables<"players">[];
}

const EscalacoesViewNew: React.FC<EscalacoesViewNewProps> = ({ jogadores }) => {
  const [showTeam, setShowTeam] = useState<'A' | 'B' | 'AMBOS'>('AMBOS');
  const [currentView, setCurrentView] = useState<'official' | 'custom'>('official');
  const [nextMatch, setNextMatch] = useState<Tables<"partidas"> | null>(null);
  const [officialLineup, setOfficialLineup] = useState<{
    timeA: { nome: string; jogadores: TeamPlayerV3[] };
    timeB: { nome: string; jogadores: TeamPlayerV3[] };
  } | null>(null);
  const [autoGeneratedLineup, setAutoGeneratedLineup] = useState<LineupResult | null>(null);
  const [loading, setLoading] = useState(true);
  const isMobile = useIsMobile();
  
  useEffect(() => {
    loadNextMatch();
  }, []);

  useEffect(() => {
    // Generate automatic lineup when no official match is available
    if (!nextMatch && jogadores.length > 0) {
      generateAutomaticLineup();
    }
  }, [nextMatch, jogadores]);

  const loadNextMatch = async () => {
    try {
      const { data: partida, error } = await supabase
        .from('partidas')
        .select('*')
        .in('status', ['AGENDADA', 'AO_VIVO'])
        .order('data_partida')
        .limit(1)
        .maybeSingle();

      if (error) throw error;
      
      setNextMatch(partida);
      
      if (partida && partida.time_a_jogadores && partida.time_b_jogadores) {
        // Carregar dados dos jogadores escalados
        const allPlayerIds = [...partida.time_a_jogadores, ...partida.time_b_jogadores];
        
        const { data: playersData, error: playersError } = await supabase
          .from('players')
          .select('*')
          .in('id', allPlayerIds);

        if (playersError) throw playersError;

        // Process players using the new v3 format
        const processedPlayers = preparePlayersV3(playersData || []);
        
        const timeAPlayers = processedPlayers.filter(p => partida.time_a_jogadores?.includes(p.id)) || [];
        const timeBPlayers = processedPlayers.filter(p => partida.time_b_jogadores?.includes(p.id)) || [];
        
        setOfficialLineup({
          timeA: { nome: partida.time_a_nome, jogadores: timeAPlayers },
          timeB: { nome: partida.time_b_nome, jogadores: timeBPlayers }
        });
      }
    } catch (error) {
      console.error('Erro ao carregar próxima partida:', error);
    } finally {
      setLoading(false);
    }
  };

  const generateAutomaticLineup = () => {
    try {
      // Use default parameters for automatic generation
      const defaultRequiredRoles = {
        'Goleiro': 1,
        'Atacante': 1
      };
      
      const result = generateBalancedTeamsV3(jogadores, 5, defaultRequiredRoles);
      setAutoGeneratedLineup(result);
    } catch (error) {
      console.error('Erro ao gerar escalação automática:', error);
      setAutoGeneratedLineup(null);
    }
  };

  const getStatusColor = (status: string | null) => {
    switch (status) {
      case 'Lesionado': return 'destructive';
      case 'Disponível': return 'default';
      default: return 'secondary';
    }
  };

  if (currentView === 'custom') {
    return <CustomLineupGenerator jogadores={jogadores} onBack={() => setCurrentView('official')} />;
  }

  // Determine which lineup to display
  const displayLineup = officialLineup || autoGeneratedLineup;
  const isOfficialMatch = !!nextMatch && !!officialLineup;

  return (
    <TooltipProvider>
      <div className={`space-y-6 ${isMobile ? 'pb-20' : ''}`}>
        <div className="text-center px-4">
          <h2 className={`${isMobile ? 'text-xl' : 'text-2xl'} font-bold mb-2 flex items-center justify-center gap-2`}>
            Escalações da Próxima Partida
            <Tooltip>
              <TooltipTrigger>
                <Info className="w-4 h-4 text-gray-500 hover:text-gray-700" />
              </TooltipTrigger>
              <TooltipContent className="max-w-md p-3">
                <div className="text-sm">
                  <p className="font-semibold mb-2">Algoritmo de Escalação Inteligente v3.0:</p>
                  <p className="mb-1">• <strong>Análise de Perfis:</strong> Calcula scores universais (Nota, Ataque, Defesa) e aptidões por função</p>
                  <p className="mb-1">• <strong>Otimização Combinatória:</strong> Gera todas as combinações válidas e seleciona a mais equilibrada</p>
                  <p className="mb-1">• <strong>Custo de Desequilíbrio:</strong> Minimiza diferenças entre times em múltiplas dimensões</p>
                  <p>• <strong>Flexibilidade:</strong> Respeita funções obrigatórias definidas pelo usuário</p>
                </div>
              </TooltipContent>
            </Tooltip>
          </h2>
          <p className={`text-gray-600 ${isMobile ? 'text-sm' : ''}`}>
            {isOfficialMatch 
              ? 'Escalação oficial da próxima partida agendada'
              : 'Escalação automática gerada pelo algoritmo v3.0'
            }
          </p>
        </div>

        {/* Escalação Oficial ou Automática */}
        <Card className="mx-4">
          <CardHeader>
            <CardTitle className={`${isMobile ? 'text-lg' : 'text-xl'} flex items-center justify-between`}>
              <div className="flex items-center gap-2">
                <Calendar className="w-5 h-5" />
                {isOfficialMatch ? 'Escalação Oficial da Próxima Partida' : 'Escalação Automática Otimizada'}
              </div>
              <Button 
                onClick={() => setCurrentView('custom')}
                variant="outline"
                size="sm"
                className="flex items-center gap-2"
              >
                <Settings className="w-4 h-4" />
                Gere sua própria escalação
              </Button>
            </CardTitle>
          </CardHeader>
          <CardContent>
            {nextMatch && isOfficialMatch && (
              <div className="mb-4 p-3 bg-blue-50 rounded-lg border border-blue-200">
                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="font-semibold text-blue-800">
                      {nextMatch.time_a_nome} vs {nextMatch.time_b_nome}
                    </h3>
                    <p className="text-sm text-blue-600">
                      {new Date(nextMatch.data_partida).toLocaleString('pt-BR')}
                    </p>
                  </div>
                  <Badge variant="default">
                    {nextMatch.status}
                  </Badge>
                </div>
              </div>
            )}

            {!isOfficialMatch && autoGeneratedLineup && (
              <div className="mb-4 p-3 bg-green-50 rounded-lg border border-green-200">
                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="font-semibold text-green-800">
                      Escalação Automática Gerada
                    </h3>
                    <p className="text-sm text-green-600">
                      Custo de Desequilíbrio: {autoGeneratedLineup.custoDesequilibrio.toFixed(2)} (Menor = Mais Equilibrado)
                    </p>
                  </div>
                  <Badge variant="secondary">
                    Algoritmo v3.0
                  </Badge>
                </div>
              </div>
            )}

            {!displayLineup && (
              <div className="mb-4 p-3 bg-yellow-50 rounded-lg border border-yellow-200">
                <p className="text-sm text-yellow-700">
                  Nenhuma escalação disponível. Verifique se há jogadores suficientes.
                </p>
              </div>
            )}

            {displayLineup && (
              <>
                <div className="flex items-center gap-4 mb-4">
                  <label className="font-medium">Mostrar:</label>
                  <Select value={showTeam} onValueChange={(value: 'A' | 'B' | 'AMBOS') => setShowTeam(value)}>
                    <SelectTrigger className={isMobile ? 'w-40' : 'w-48'}>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="AMBOS">Ambos os Times</SelectItem>
                      <SelectItem value="A">Apenas Time A</SelectItem>
                      <SelectItem value="B">Apenas Time B</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className={`${isMobile ? 'space-y-4' : 'flex gap-6'}`}>
                  {/* Campo de futebol */}
                  <div className="flex-1">
                    <CampoFutebolV3
                      timeA={displayLineup.timeA.jogadores}
                      timeB={displayLineup.timeB.jogadores}
                      showTeam={showTeam}
                    />
                  </div>

                  {/* Reservas */}
                  {autoGeneratedLineup?.reservas && autoGeneratedLineup.reservas.length > 0 && (
                    <div className={isMobile ? 'w-full' : 'w-64'}>
                      <Card>
                        <CardHeader>
                          <CardTitle className="text-lg">Reservas</CardTitle>
                        </CardHeader>
                        <CardContent>
                          <div className={`${isMobile ? 'grid grid-cols-2 gap-2' : 'space-y-3'}`}>
                            {autoGeneratedLineup.reservas.map((player) => (
                              <div key={player.id} className={`flex ${isMobile ? 'flex-col' : 'items-center justify-between'} p-2 bg-gray-50 rounded`}>
                                <div className={isMobile ? 'text-center' : ''}>
                                  <p className={`${isMobile ? 'text-xs' : 'text-sm'} font-medium`}>{player.jogador}</p>
                                  <p className={`${isMobile ? 'text-xs' : 'text-xs'} text-gray-500`}>Nota: {player.nota.toFixed(1)}</p>
                                </div>
                                <Badge variant={getStatusColor(player.status)} className={`${isMobile ? 'text-xs mt-1 self-center' : ''}`}>
                                  {player.status === 'Lesionado' ? 'Lesionado' : 'Reserva'}
                                </Badge>
                              </div>
                            ))}
                          </div>
                        </CardContent>
                      </Card>
                    </div>
                  )}
                </div>
              </>
            )}
          </CardContent>
        </Card>

        {/* Estatísticas dos times */}
        {displayLineup && (
          <div className={`${isMobile ? 'space-y-4 mx-4' : 'grid grid-cols-1 md:grid-cols-2 gap-6'}`}>
            <Card>
              <CardHeader>
                <CardTitle className="text-green-600">
                  {displayLineup.timeA.nome || 'Time A'}
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  <p><strong>Jogadores:</strong> {displayLineup.timeA.jogadores.length}</p>
                  {autoGeneratedLineup && (
                    <>
                      <p><strong>Formação:</strong> {autoGeneratedLineup.timeA.formacao}</p>
                      <p><strong>Score Nota Total:</strong> {autoGeneratedLineup.timeA.scoreNotaTotal.toFixed(1)}</p>
                      <p><strong>Score Ataque:</strong> {autoGeneratedLineup.timeA.scoreAtaqueTotal.toFixed(1)}</p>
                      <p><strong>Score Defesa:</strong> {autoGeneratedLineup.timeA.scoreDefesaTotal.toFixed(1)}</p>
                      <p><strong>Média por Jogador:</strong> {(autoGeneratedLineup.timeA.scoreNotaTotal / autoGeneratedLineup.timeA.jogadores.length).toFixed(1)}</p>
                    </>
                  )}
                  {!autoGeneratedLineup && (
                    <p><strong>Formação:</strong> Personalizada</p>
                  )}
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-blue-600">
                  {displayLineup.timeB.nome || 'Time B'}
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  <p><strong>Jogadores:</strong> {displayLineup.timeB.jogadores.length}</p>
                  {autoGeneratedLineup && (
                    <>
                      <p><strong>Formação:</strong> {autoGeneratedLineup.timeB.formacao}</p>
                      <p><strong>Score Nota Total:</strong> {autoGeneratedLineup.timeB.scoreNotaTotal.toFixed(1)}</p>
                      <p><strong>Score Ataque:</strong> {autoGeneratedLineup.timeB.scoreAtaqueTotal.toFixed(1)}</p>
                      <p><strong>Score Defesa:</strong> {autoGeneratedLineup.timeB.scoreDefesaTotal.toFixed(1)}</p>
                      <p><strong>Média por Jogador:</strong> {(autoGeneratedLineup.timeB.scoreNotaTotal / autoGeneratedLineup.timeB.jogadores.length).toFixed(1)}</p>
                    </>
                  )}
                  {!autoGeneratedLineup && (
                    <p><strong>Formação:</strong> Personalizada</p>
                  )}
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        {/* Informações do Algoritmo v3.0 */}
        {autoGeneratedLineup && (
          <Card className="mx-4">
            <CardHeader>
              <CardTitle className="text-purple-600">Análise do Algoritmo v3.0</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="text-center p-4 bg-purple-50 rounded-lg">
                  <p className="text-2xl font-bold text-purple-600">
                    {autoGeneratedLineup.custoDesequilibrio.toFixed(2)}
                  </p>
                  <p className="text-sm text-gray-600">Custo de Desequilíbrio</p>
                  <p className="text-xs text-gray-500 mt-1">
                    (Menor = Mais Equilibrado)
                  </p>
                </div>
                <div className="text-center p-4 bg-blue-50 rounded-lg">
                  <p className="text-2xl font-bold text-blue-600">
                    {Math.abs(autoGeneratedLineup.timeA.scoreNotaTotal - autoGeneratedLineup.timeB.scoreNotaTotal).toFixed(1)}
                  </p>
                  <p className="text-sm text-gray-600">Diferença de Notas</p>
                  <p className="text-xs text-gray-500 mt-1">
                    Entre os dois times
                  </p>
                </div>
                <div className="text-center p-4 bg-green-50 rounded-lg">
                  <p className="text-2xl font-bold text-green-600">
                    {autoGeneratedLineup.timeA.jogadores.length + autoGeneratedLineup.timeB.jogadores.length}
                  </p>
                  <p className="text-sm text-gray-600">Jogadores em Campo</p>
                  <p className="text-xs text-gray-500 mt-1">
                    {autoGeneratedLineup.reservas.length} reservas
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </TooltipProvider>
  );
};

export default EscalacoesViewNew;